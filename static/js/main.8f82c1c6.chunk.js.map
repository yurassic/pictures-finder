{"version":3,"sources":["components/SearchForm.jsx","components/PicturesList.jsx","pixabayConfig.js","App.js","reportWebVitals.js","index.js"],"names":["SearchForm","onSubmit","ref","useRef","style","width","data-testid","noValidate","e","preventDefault","current","value","TextField","id","label","fullWidth","variant","inputRef","InputProps","endAdornment","InputAdornment","position","PicturesList","pictures","GridList","cellHeight","cols","map","picture","GridListTile","src","webformatURL","alt","tags","React","memo","getUrl","keyWord","encodeURIComponent","App","useState","isFetching","setIsFetching","setPictures","error","setError","nothingFound","setNothingFound","getPictures","a","axios","get","data","total","hits","message","Container","maxWidth","Grid","className","container","direction","justify","alignItems","Box","m","CircularProgress","size","disableShrink","Alert","severity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+VA2CeA,EArCI,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACdC,EAAMC,iBAAO,MAOnB,OACE,sBACEC,MAAO,CAAEC,MAAO,QAChBC,cAAY,OACZC,YAAU,EACVN,SAViB,SAACO,GAAO,IAAD,EAC1BA,EAAEC,iBACFR,EAAQ,OAACC,QAAD,IAACA,GAAD,UAACA,EAAKQ,eAAN,aAAC,EAAcC,QAIvB,SAME,cAACC,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,8DACNC,WAAS,EACTC,QAAQ,WACRC,SAAUf,EACVgB,WAAY,CACVC,aACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,MAAzB,SACE,cAAC,IAAD,Y,kBCzBRC,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACnB,cAACC,EAAA,EAAD,CAAUC,WAAY,IAAKC,KAAM,EAAjC,SACGH,EAASI,KAAI,SAACC,GAAD,OACZ,cAACC,EAAA,EAAD,CAA+BH,KAAM,EAArC,SACE,qBAAKI,IAAKF,EAAQG,aAAcC,IAAKJ,EAAQK,QAD5BL,EAAQf,UAWlBqB,MAAMC,KAAKb,GCdbc,EAAS,SAACC,GAAD,gBALN,2BAKM,gBAJN,qCAIM,cACWC,mBAC7BD,GAFkB,uBAFH,QAEG,qBAHL,KCmEFE,G,MAtDH,WAAO,IAAD,EACoBC,oBAAS,GAD7B,mBACTC,EADS,KACGC,EADH,OAEgBF,mBAAS,IAFzB,mBAETjB,EAFS,KAECoB,EAFD,OAGUH,mBAAS,MAHnB,mBAGTI,EAHS,KAGFC,EAHE,OAIwBL,oBAAS,GAJjC,mBAITM,EAJS,KAIKC,EAJL,KAMVC,EAAW,uCAAG,WAAOX,GAAP,iBAAAY,EAAA,6DAClBP,GAAc,GACdG,EAAS,MAFS,kBAKOK,IAAMC,IAAIf,EAAOC,IALxB,gBAKRe,EALQ,EAKRA,KACRV,GAAc,GACdK,EAAgC,KAAZ,OAAJK,QAAI,IAAJA,OAAA,EAAAA,EAAMC,QACtBV,EAAW,OAACS,QAAD,IAACA,OAAD,EAACA,EAAME,MARF,kDAUhBZ,GAAc,GACdG,EAAQ,OAAC,EAAD,yBAAC,KAAOU,SAXA,0DAAH,sDAejB,OACE,cAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,eAACC,EAAA,EAAD,CACEC,UAAU,cACVC,WAAS,EACTC,UAAU,SACVC,QAAQ,SACRC,WAAW,SALb,UAOE,cAAC,EAAD,CAAY9D,SAAU+C,IACtB,cAACgB,EAAA,EAAD,CAAKC,EAAG,IACPxB,EACC,cAACyB,EAAA,EAAD,CAAkBC,KAAM,GAAIC,eAAa,IAEzC,qCACE,cAAC,EAAD,CAAc7C,SAAUA,IACvBuB,GACC,cAACuB,EAAA,EAAD,CAAOrD,QAAQ,SAASsD,SAAS,QAAjC,6EAID1B,GACC,cAACyB,EAAA,EAAD,CAAOrD,QAAQ,SAASsD,SAAS,QAAjC,SACG1B,cC/CF2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8f82c1c6.chunk.js","sourcesContent":["import { useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nconst SearchForm = ({ onSubmit }) => {\n  const ref = useRef(null);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(ref?.current?.value);\n  };\n\n  return (\n    <form\n      style={{ width: \"100%\" }}\n      data-testid=\"form\"\n      noValidate\n      onSubmit={handleSubmit}\n    >\n      <TextField\n        id=\"outlined-basic\"\n        label=\"Type words associated with the pictures you are looking for\"\n        fullWidth\n        variant=\"outlined\"\n        inputRef={ref}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <SearchIcon />\n            </InputAdornment>\n          ),\n        }}\n      />\n    </form>\n  );\n};\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\n\nconst PicturesList = ({ pictures }) => (\n  <GridList cellHeight={160} cols={3}>\n    {pictures.map((picture) => (\n      <GridListTile key={picture.id} cols={1}>\n        <img src={picture.webformatURL} alt={picture.tags} />\n      </GridListTile>\n    ))}\n  </GridList>\n);\n\nPicturesList.propTypes = {\n  pictures: PropTypes.array.isRequired,\n};\n\nexport default React.memo(PicturesList);\n","const API_URL = \"https://pixabay.com/api/\";\nconst API_KEY = \"13417145-d0c367819415b077de5e950e3\";\nconst PER_PAGE = 21;\nconst IMAGE_TYPE = \"photo\";\n\nexport const getUrl = (keyWord) =>\n  `${API_URL}?key=${API_KEY}&q=${encodeURIComponent(\n    keyWord\n  )}&image_type=${IMAGE_TYPE}&per_page=${PER_PAGE}`;\n","import axios from \"axios\";\nimport { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport Container from \"@material-ui/core/Container\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport SearchForm from \"./components/SearchForm\";\nimport PicturesList from \"./components/PicturesList\";\n\nimport { getUrl } from \"./pixabayConfig\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [isFetching, setIsFetching] = useState(false);\n  const [pictures, setPictures] = useState([]);\n  const [error, setError] = useState(null);\n  const [nothingFound, setNothingFound] = useState(false);\n\n  const getPictures = async (keyWord) => {\n    setIsFetching(true);\n    setError(null);\n\n    try {\n      const { data } = await axios.get(getUrl(keyWord));\n      setIsFetching(false);\n      setNothingFound(data?.total === 0);\n      setPictures(data?.hits);\n    } catch (error) {\n      setIsFetching(false);\n      setError(error?.message);\n    }\n  };\n\n  return (\n    <Container maxWidth=\"md\">\n      <Grid\n        className=\"app-wrapper\"\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <SearchForm onSubmit={getPictures} />\n        <Box m={2} />\n        {isFetching ? (\n          <CircularProgress size={70} disableShrink />\n        ) : (\n          <>\n            <PicturesList pictures={pictures} />\n            {nothingFound && (\n              <Alert variant=\"filled\" severity=\"error\">\n                We don't found any picture, please try again with another words\n              </Alert>\n            )}\n            {error && (\n              <Alert variant=\"filled\" severity=\"error\">\n                {error}\n              </Alert>\n            )}\n          </>\n        )}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}