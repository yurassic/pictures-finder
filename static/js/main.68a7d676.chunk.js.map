{"version":3,"sources":["components/SearchForm.jsx","components/PicturesList.jsx","pixabayConfig.js","helpers.js","App.js","reportWebVitals.js","index.js"],"names":["SearchForm","onSubmit","useState","error","setError","ref","useRef","style","width","data-testid","noValidate","e","preventDefault","current","value","length","TextField","id","label","fullWidth","variant","inputRef","helperText","InputProps","endAdornment","InputAdornment","position","PicturesList","pictures","onImageClick","GridList","cellHeight","cols","map","picture","GridListTile","cursor","src","webformatURL","alt","tags","onClick","largeImageURL","React","memo","getUrl","keyWord","page","encodeURIComponent","calculatePagesCount","items","perPage","Number","parseInt","App","isFetching","setIsFetching","setPictures","totalCount","setTotalCount","currentPage","setCurrentPage","modalOpen","setModalOpen","modalImageUrl","setModalImageUrl","keyWordRef","getPictures","a","axios","get","data","pages","totalHits","total","hits","message","handleOpenModal","useCallback","imageUrl","Container","maxWidth","Grid","className","container","direction","justify","alignItems","Box","m","CircularProgress","size","disableShrink","Pagination","count","color","onChange","Alert","severity","Modal","open","onClose","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68a7d676.chunk.js","sourcesContent":["import { useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nconst SearchForm = ({ onSubmit }) => {\n  const [error, setError] = useState(null);\n  const ref = useRef(null);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const { current } = ref;\n\n    if (current?.value.length < 2) {\n      return setError(\"Add at least 2 symbol\");\n    }\n\n    if (current?.value.length > 30) {\n      return setError(\"Can't be more than 30 symbols\");\n    }\n\n    setError(null);\n    onSubmit(current?.value);\n  };\n\n  return (\n    <form\n      style={{ width: \"100%\" }}\n      data-testid=\"form\"\n      noValidate\n      onSubmit={handleSubmit}\n    >\n      <TextField\n        id=\"outlined-basic\"\n        label=\"Type words associated with the pictures you are looking for\"\n        fullWidth\n        variant=\"outlined\"\n        inputRef={ref}\n        helperText={error}\n        error={!!error}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <SearchIcon />\n            </InputAdornment>\n          ),\n        }}\n      />\n    </form>\n  );\n};\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\n\nconst PicturesList = ({ pictures, onImageClick }) => (\n  <GridList cellHeight={160} cols={3}>\n    {pictures.map((picture) => (\n      <GridListTile key={picture.id} cols={1}>\n        <img\n          style={{ cursor: \"pointer\" }}\n          data-testid=\"picture\"\n          src={picture.webformatURL}\n          alt={picture.tags}\n          onClick={() => onImageClick(picture.largeImageURL)}\n        />\n      </GridListTile>\n    ))}\n  </GridList>\n);\n\nPicturesList.propTypes = {\n  pictures: PropTypes.array.isRequired,\n  onImageClick: PropTypes.func,\n};\n\nexport default React.memo(PicturesList);\n","const API_URL = \"https://pixabay.com/api/\";\nconst API_KEY = \"13417145-d0c367819415b077de5e950e3\";\nexport const PER_PAGE = 21;\nconst IMAGE_TYPE = \"photo\";\n\nexport const getUrl = (keyWord, page) =>\n  `${API_URL}?key=${API_KEY}&q=${encodeURIComponent(\n    keyWord\n  )}&image_type=${IMAGE_TYPE}&per_page=${PER_PAGE}&page=${page}`;\n","export const calculatePagesCount = (items, perPage) =>\n  items % perPage !== 0\n    ? Number.parseInt(items / perPage) + 1\n    : Number.parseInt(items / perPage);\n","import axios from \"axios\";\nimport { useState, useRef, useCallback } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport Container from \"@material-ui/core/Container\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport Modal from \"@material-ui/core/Modal\";\n\nimport SearchForm from \"./components/SearchForm\";\nimport PicturesList from \"./components/PicturesList\";\n\nimport { getUrl, PER_PAGE } from \"./pixabayConfig\";\nimport { calculatePagesCount } from \"./helpers\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [isFetching, setIsFetching] = useState(false);\n  const [pictures, setPictures] = useState([]);\n  const [error, setError] = useState(null);\n  const [totalCount, setTotalCount] = useState({});\n  const [currentPage, setCurrentPage] = useState(1);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [modalImageUrl, setModalImageUrl] = useState(null);\n  const keyWordRef = useRef(null);\n\n  const getPictures = async (keyWord, page = 1) => {\n    setIsFetching(true);\n    setError(null);\n    setCurrentPage(page);\n    keyWordRef.current = keyWord;\n\n    try {\n      const { data } = await axios.get(getUrl(keyWord, page));\n      setIsFetching(false);\n      setTotalCount({\n        pages: calculatePagesCount(data?.totalHits, PER_PAGE),\n        pictures: data?.total,\n      });\n      setPictures(data?.hits);\n    } catch (error) {\n      setIsFetching(false);\n      setError(error?.message);\n    }\n  };\n\n  const handlePagination = (e, value) => {\n    getPictures(keyWordRef.current, value);\n  };\n\n  const handleOpenModal = useCallback((imageUrl) => {\n    setModalOpen(true);\n    setModalImageUrl(imageUrl);\n  }, []);\n\n  return (\n    <Container maxWidth=\"md\">\n      <Grid\n        className=\"app-wrapper\"\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <SearchForm onSubmit={getPictures} />\n        <Box m={2} />\n        {isFetching ? (\n          <CircularProgress size={70} disableShrink />\n        ) : (\n          <>\n            {totalCount?.pictures > 0 && (\n              <>\n                <PicturesList\n                  pictures={pictures}\n                  onImageClick={handleOpenModal}\n                />\n                <Box m={1} />\n                <Pagination\n                  count={totalCount?.pages}\n                  color=\"primary\"\n                  onChange={handlePagination}\n                  page={currentPage}\n                />\n                <Box m={1} />\n              </>\n            )}\n            {totalCount?.pictures === 0 && (\n              <Alert variant=\"filled\" severity=\"error\">\n                We don't found any picture, please try again with another words\n              </Alert>\n            )}\n            {error && (\n              <Alert variant=\"filled\" severity=\"error\">\n                {error}\n              </Alert>\n            )}\n          </>\n        )}\n      </Grid>\n      <Modal open={modalOpen} onClose={() => setModalOpen(false)}>\n        <img\n          className=\"modal-img\"\n          data-testid=\"picture-in-modal\"\n          src={modalImageUrl}\n        />\n      </Modal>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}